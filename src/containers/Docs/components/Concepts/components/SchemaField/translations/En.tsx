import { DATASET, SCHEMA } from "@modules/docs/domain/core/sections/concepts"
import { CUSTOM, KEY } from "@modules/docs/domain/core/sections/field-types"
import {
  Danger,
  H2,
  H3,
  Info,
  Link,
  List,
  ListItem,
  MiniCode,
  P,
  Strong,
  Tip,
  Warning,
} from "@modules/shared/modules/markdown/components/Markdown/components"
import {
  ArrayFieldExample,
  ArrayFunctionDefinition,
  ArrayFunctionExample,
  ArrayFunctionParams,
  ArrayLimitExample,
  ArrayLimitParams,
  Definition,
  FloatNullExample,
  FunctionNullExample,
  IntegerNullExample,
  NullFunctionDefinition,
  NullFunctionParams,
  ObjectParams,
} from "../components"
import {
  ARRAY_FIELDS,
  ARRAY_LIMIT_FUNCTION,
  ARRAY_LIMITS,
  NULL_FIELDS,
  NULL_FUNCTION,
  NULL_PROBABILITY,
  PARAMS,
  SPECIFIC_NULL_NUMBER,
} from "@modules/docs/domain/core/sections/concepts/schema-field"

export default function En() {
  return (
    <>
      <P>
        A field within a <Link to={SCHEMA.redirect}>schema</Link> can be defined in two ways:
      </P>

      <List>
        <ListItem>
          <P>
            A simple form where you define the <Link to={CUSTOM.redirect}>field type</Link> to be
            used.
          </P>
        </ListItem>

        <ListItem>
          <P>An object where you can modify the way the value is generated.</P>
        </ListItem>
      </List>

      <Definition />

      <Tip title="Configurable field types">
        <P>
          Not all field types can be configured. Check the documentation for the{" "}
          <Link to={KEY.redirect}>available field types</Link> to find out which ones you can
          configure.
        </P>
      </Tip>

      <H2 title={PARAMS} />

      <P>
        All fields on a <Link to={SCHEMA.redirect}>schema</Link> can be configured so that the
        resulting value in each document is either <MiniCode>null</MiniCode> or an array of values.
        This can be done by defining an object with the following fields.
      </P>

      <ObjectParams />

      <H2 title={ARRAY_FIELDS} />

      <P>
        Fields on a <Link to={SCHEMA.redirect}>schema</Link> can be modified to return values as an
        array of the defined <Link to={KEY.redirect}>field type</Link> .
      </P>

      <ArrayFieldExample />

      <Danger title="Exception">
        <P>
          Any error in the definition of the parameter <MiniCode>isArray</MiniCode> will throw the
          exception <MiniCode>WrongArrayDefinitionError</MiniCode>.
        </P>
      </Danger>

      <H3 title={ARRAY_LIMITS} />

      <P>
        Obviously in real contexts fields with array values vary in length on each document. This
        can be configured by defining the properties <MiniCode>min</MiniCode> and{" "}
        <MiniCode>max</MiniCode>. For each document an array length will be generated, this value
        would be between the defined limits.
      </P>

      <ArrayLimitParams />

      <ArrayLimitExample />

      <Danger title="Correct limits">
        <P>
          You must ensure that the value of <MiniCode>max</MiniCode> is greater than the value of{" "}
          <MiniCode>min</MiniCode>. Otherwise an exception will be thrown.
        </P>
      </Danger>

      <H3 title={ARRAY_LIMIT_FUNCTION} />

      <P>
        If the array length depends on the fields values of the document generated until that
        moment, this can be configured through a function that receives the current state of the
        document and the current state of the <Link to={DATASET.redirect}>Dataset</Link>.
      </P>

      <ArrayFunctionDefinition />

      <ArrayFunctionParams />

      <ArrayFunctionExample />

      <P>
        In this example, depending the user age, the number of posts written varies. If the age is
        greater than 40, 10 to 20 <MiniCode>id</MiniCode> will be selected from the documents
        generated by the <MiniCode>Post</MiniCode> <Link to={SCHEMA.redirect}>schema</Link> and
        otherwise the array will have a maximum of 5 values.
      </P>

      <H2 title={NULL_FIELDS} />

      <P>
        For fields that can have a <MiniCode>null</MiniCode> value on the documents to be generated,
        this can be configured through the property <MiniCode>possibleNull</MiniCode>.
      </P>

      <P>The value for this setting can be one of the following 3 options:</P>

      <List>
        <ListItem>
          <P>
            An integer indicating the number of documents in which the field will have a{" "}
            <MiniCode>null</MiniCode> value.
          </P>
        </ListItem>
        <ListItem>
          <P>
            A float between 0 and 1 indicating the probability that in each document the field will
            have a <MiniCode>null</MiniCode> value.
          </P>
        </ListItem>
        <ListItem>
          <P>
            A <MiniCode>boolean</MiniCode> indicating whether or not <MiniCode>null</MiniCode> will
            always be generated.
          </P>
        </ListItem>
        <ListItem>
          <P>
            A function that returns a <MiniCode>boolean</MiniCode> or a probability value.
          </P>
        </ListItem>
      </List>

      <Danger title="Exception">
        <P>
          Any error in the definition of the <MiniCode>possibleNull</MiniCode> parameter will throw
          the <MiniCode>WrongPossibleNullDefinitionError</MiniCode> exception.
        </P>
      </Danger>

      <H3 title={SPECIFIC_NULL_NUMBER} />

      <P>
        If an integer is defined as <MiniCode>possibleNull</MiniCode> then that number of documents
        will be chosen randomly and <MiniCode>null</MiniCode> will be assigned to the defined field.
      </P>

      <IntegerNullExample />

      <P>
        In this example, defining <MiniCode>possibleNull</MiniCode> as <MiniCode>2</MiniCode>{" "}
        selects 2 random documents and assigns <MiniCode>null</MiniCode> to the value{" "}
        <MiniCode>username</MiniCode> field.
      </P>

      <H3 title={NULL_PROBABILITY} />

      <P>
        For cases where a specific number of fields with a <MiniCode>null</MiniCode> value is not
        needed, a float probability value can be defined that is between 0 and 1.{" "}
        <Strong>
          With 1 being the highest probability of the value being <MiniCode>null</MiniCode> and 0
          being the lowest
        </Strong>
        .
      </P>

      <P>
        When generating each document, a random number between 0 and 1 is generated. If this is less
        than the parameter <MiniCode>possibleNull</MiniCode> it will return{" "}
        <MiniCode>null</MiniCode>, otherwise the value of the defined field type will be generated.
      </P>

      <Danger title="Probability value out of bounds">
        <P>
          If you define a probability value greater than <MiniCode>1</MiniCode> or less than{" "}
          <MiniCode>0</MiniCode> the exception <MiniCode>WrongPossibleNullDefinitionError</MiniCode>{" "}
          will be thrown.
        </P>
      </Danger>

      <FloatNullExample />

      <P>
        In this example, by defining <MiniCode>possibleNull</MiniCode> with value{" "}
        <MiniCode>0.7</MiniCode> there is a greater probability that the field{" "}
        <MiniCode>username</MiniCode> is null in the documents, so in most cases this situation
        should happend.
      </P>

      <Info>
        <P>
          Because these are probabilistic values, the number of documents that contain the field
          with <MiniCode>null</MiniCode> value varies in each generation that is executed.
        </P>
      </Info>

      <Warning title="Absolute probabilities">
        <P>
          The probability values must be values between <MiniCode>0</MiniCode> and{" "}
          <MiniCode>1</MiniCode>. If one of these limits is defined (<MiniCode>0</MiniCode> or{" "}
          <MiniCode>1</MiniCode>) the probability value will be taken as the number of documents
          that will have the field defined as <MiniCode>null</MiniCode>.{" "}
        </P>
        <P>
          If you want to indicate that a field will always have a <MiniCode>null</MiniCode> value,
          or on contrary, that it will never have a value, you can use the{" "}
          <MiniCode>boolean</MiniCode> definition, <MiniCode>true</MiniCode> to always generate a
          <MiniCode>null</MiniCode> value and <MiniCode>false</MiniCode> to get the opposite effect.
        </P>
      </Warning>

      <H3 title={NULL_FUNCTION} />

      <P>
        If the probability of the field having a <MiniCode>null</MiniCode> value in each document
        depends on the fields generated until that point in the document or on the current state of
        the <Link to={DATASET.redirect}>dataset</Link> you can define{" "}
        <MiniCode>possibleNull</MiniCode> as a function that returns a probability value between{" "}
        <MiniCode>0</MiniCode> and <MiniCode>1</MiniCode> or a <MiniCode>boolean</MiniCode>.
      </P>

      <NullFunctionDefinition />

      <NullFunctionParams />

      <FunctionNullExample />
    </>
  )
}
